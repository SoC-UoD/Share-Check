package com.agile.share.check.Stock;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.Locale;


public class ShareCheck {
	
	// Share Check Variables
	private final int stockInPortfolio = 5;
	private String [] stockSymbols;
	private int[] stockShares;
	private StockBean [] stockBeans;
	private static boolean threadRunning = false;
	public String[] items = {"BP Amoco PLC","HSBC Holdings PLC","Experian","Marks & Spencers","Smith & Nephew PLC" };

	// Constructor
	public ShareCheck()
	{
		stockSymbols = new String [0];
		stockShares = new int [0];
		stockBeans = new StockBean [0];
	}
	
	public ShareCheck(String [] symbols, int [] shares)
	{
		stockSymbols = new String [stockInPortfolio];
		stockShares = new int [stockInPortfolio];
		stockBeans = new StockBean [stockInPortfolio];
		
		for(int i=0; i<5; i++)
		{
			stockSymbols[i] = symbols[i];
			stockShares[i] = shares[i];
		}
	}
	
	// Whenever thread is called it will download a set of data and then the thread will end
	public Thread thread = new Thread()
	    {
	        public void run() {
	            try {
	                		for(int i =0;i<getStockSymbols().length;i++)
	                		{
	                			getStockBeans()[i] = StockTickerDAO.getInstance().getStockPrice(getStockSymbols()[i]);
	                		}
	            } catch (Exception e) {
	                e.printStackTrace();
	            }
	            finally{	
	            	threadRunning=true;
	            }
	        }
	    };
	
	// Method that combines all functionality for checking if internet is available and downloading data
	
	// USE THIS TO DOWNLOAD ANY SHARES/ UPDATES SHARES
	// Calls isInternetOn()
	// Creates a thread to download data
	// Displays notification
	public void checkInternet()
    {
		boolean internetAvailable = isInternetOn();
		
		if(internetAvailable)
		{
	        DateString newDate = new DateString();
	        System.out.println(newDate.updateDateString());
	        
	        if(!threadRunning)
	        {
	        	threadRunning=true;
	        	thread.start();
	        }
		}
		else
		{
			System.out.println("Unavailable");
		}
    }
	
	// Called to check to see if the device has internet access enabled
	public static boolean isInternetOn() {

		return true;
	}
	
		// Prints the update time string in the new GUI interface
	        
	    // Called by each GUI to display the current time when an update is performed
	    public static void UpdateTime()
	    {
	    	DateString newDate = new DateString();
	        
	    	System.out.println(newDate.updateDateString());
	    }

	 // This method takes a float and converts it to a string that is rounded to the nearest pound
		public String convertFloatToBigDecimal(float inputValue)
		{
			BigDecimal totalShareValue = new BigDecimal(inputValue);
			NumberFormat n = NumberFormat.getCurrencyInstance(Locale.UK);
	        String roundedString = n.format(totalShareValue.setScale(0,BigDecimal.ROUND_HALF_EVEN));
	        roundedString = roundedString.substring(0, roundedString.length()-3);
			return  roundedString;
		}
	    
	    // Print Methods
		public void printStockPortfolioValue()
		{
			System.out.println("The total value of the portfolio is : £"+getStockTotalValue());
			System.out.println("The total value of the portfolio is : £"+Math.round(getStockTotalValue()));
		}

		public void printStockDetails()
		{
			for(int i =0;i<getStockSymbols().length;i++)
			{
				System.out.println("Stock name = "+ getStockSymbols()[i] +" Price = "+stockBeans[i].price);
			}
		}
	    
	    // Getters and Setters
		public StockBean [] getStockBeans() {
			return this.stockBeans;
		}

		public void setStockBeans(StockBean [] stockBeanArray) {
			this.stockBeans = stockBeanArray;
		}
		
	    public static float requestStockValue(StockBean stockBean)
		{
			return stockBean.price;
		}
	    
		public void requestStockDetails()
		{
			for(int i =0;i<getStockSymbols().length;i++)
			{
				stockBeans[i] = StockTickerDAO.getInstance().getStockPrice(getStockSymbols()[i]);
			}
		}
		 	
		public float getStockTotalValue()
		{
			float total =0.0f;
			
			for(int i =0;i<getStockSymbols().length;i++)
			{
				total += (getStockBeans()[i].price * stockShares[i]);
			}
					
			return total;
		}
		
		public int getStockShare(int position) {
			return stockShares[position];
		}

		public int getStockinportfolio() {
			return stockInPortfolio;
		}

		public String getStockSymbol(int position) {
			return stockSymbols[position];
		}

		public String [] getStockSymbols() {
			return stockSymbols;
		}
		
		public int[] getStockShares() {
			return stockShares;
		}
		
		public String[] getItems() {
			return items;
		}
		
		public void setStockSymbols(String[] stockSymbols) {
			this.stockSymbols = stockSymbols;
		}
		
		public int getStockInPortfolio() {
			return stockInPortfolio;
		}

		public void setStockShares(int[] stockShares) {
			this.stockShares = stockShares;
		}

		public void setItems(String[] items) {
			this.items = items;
		}
		
	
}
